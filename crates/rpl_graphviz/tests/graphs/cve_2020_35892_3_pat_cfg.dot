digraph ControlFlowGraph {
    bb0 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td  align="center" colspan="1">?bb0</td></tr><tr><td align="left" balign="left">_?1 = copy ((*_?0).len)<br/>_?11 = core::ops::range::Range { start: const 0_usize, end: move _?1 }<br/>_?12 = move _?11<br/></td></tr><tr><td align="left">goto ?bb1</td></tr></table>>];
    bb1 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td  align="center" colspan="1">?bb1</td></tr><tr><td align="left" balign="left">_?13 = &amp;mut _?12<br/>_?7 = &amp;((*_?13).start)<br/>_?9 = copy (*_?7)<br/>_?8 = &amp;((*_?13).end)<br/>_?10 = copy (*_?8)<br/>_?17 = Lt(move _?9, move _?10)<br/></td></tr><tr><td align="left">switchInt(move _?17) -&gt; [false: ?bb4, otherwise: ?bb5]</td></tr></table>>];
    bb2 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td  align="center" colspan="1">?bb2</td></tr><tr><td align="left">end</td></tr></table>>];
    bb3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td  align="center" colspan="1">?bb3</td></tr><tr><td align="left" balign="left">_?5 = discriminant(_?4)<br/></td></tr><tr><td align="left">switchInt(move _?5) -&gt; [0_isize: ?bb8, 1_isize: ?bb9]</td></tr></table>>];
    bb4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td  align="center" colspan="1">?bb4</td></tr><tr><td align="left" balign="left">_?4 = #[lang = &quot;None&quot;]<br/></td></tr><tr><td align="left">goto ?bb3</td></tr></table>>];
    bb5 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td  align="center" colspan="1">?bb5</td></tr><tr><td align="left" balign="left">_?2 = copy ((*_?13).start)<br/></td></tr><tr><td align="left">_?3 = core::iter::range::Step::forward_unchecked(copy _?2, const 1_usize) -&gt; ?bb6</td></tr></table>>];
    bb6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td  align="center" colspan="1">?bb6</td></tr><tr><td align="left" balign="left">((*_?13).start) = move _?3<br/>_?4 = #[lang = &quot;Some&quot;](copy _?2)<br/></td></tr><tr><td align="left">goto ?bb3</td></tr></table>>];
    bb7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td  align="center" colspan="1">?bb7</td></tr><tr><td align="left">goto ?bb1</td></tr></table>>];
    bb8 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td  align="center" colspan="1">?bb8</td></tr><tr><td align="left">goto ?bb2</td></tr></table>>];
    bb9 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td  align="center" colspan="1">?bb9</td></tr><tr><td align="left" balign="left">_?6 = copy ((_?4 as Some).0)<br/>_?14 = copy ((*_?0).mem)<br/>_?15 = copy _?6 as isize (IntToInt)<br/>_?16 = Offset(copy _?14, copy _?15)<br/></td></tr><tr><td align="left">core::ptr::drop_in_place(copy _?16) -&gt; ?bb7</td></tr></table>>];
    bb0 -> bb1 [label="goto"];
    bb1 -> bb4 [label="0"];
    bb1 -> bb5 [label="otherwise"];
    bb3 -> bb8 [label="0"];
    bb3 -> bb9 [label="1"];
    bb4 -> bb3 [label="goto"];
    bb5 -> bb6 [label="return"];
    bb6 -> bb3 [label="goto"];
    bb7 -> bb1 [label="goto"];
    bb8 -> bb2 [label="goto"];
    bb9 -> bb7 [label="return"];
}
