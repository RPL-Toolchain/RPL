error: Use `Vec::set_len` to extend the length of a `Vec`, potentially including uninitialized elements
  --> tests/ui/cve_2019_16138/src/lib.rs:200:25
   |
LL |                 let mut ret = Vec::with_capacity(pixel_count);
   |                               ------------------------------- `Vec` created here
...
LL |                     ret.set_len(pixel_count);
   |                         ^^^^^^^^^^^^^^^^^^^^ `Vec::set_len` called here
   |
   = note: make sure all elements are initialized before using them
   = note: `#[deny(rpl::set_len_to_extend)]` on by default

error: it violates the precondition of `Vec::set_len` to extend a `Vec`'s length without initializing its content in advance
  --> tests/ui/cve_2019_16138/src/lib.rs:200:25
   |
LL |                 let mut ret = Vec::with_capacity(pixel_count);
   |                               ------------------------------- `Vec` created here
...
LL |                     ret.set_len(pixel_count);
   |                         ^^^^^^^^^^^^^^^^^^^^ `Vec::set_len` called here
   |
   = help: before calling `set_len` to extend its length, make sure all elements are initialized, using such as `spare_capacity_mut` or `as_mut_ptr`
   = note: `#[deny(rpl::set_len_uninitialized)]` on by default

error: it violates the precondition of `Vec::set_len` to extend a `Vec`'s length without initializing its content in advance
  --> tests/ui/cve_2019_16138/src/lib.rs:215:37
   |
LL | ...                   let mut buf = Vec::<RGBE8Pixel>::with_capacity(uszwidth);
   |                                     ------------------------------------------ `Vec` created here
LL | ...                   unsafe {
LL | ...                       buf.set_len(uszwidth);
   |                               ^^^^^^^^^^^^^^^^^ `Vec::set_len` called here
   |
   = help: before calling `set_len` to extend its length, make sure all elements are initialized, using such as `spare_capacity_mut` or `as_mut_ptr`

error: it violates the precondition of `std::slice::from_raw_parts_mut` to create a slice from uninitialized data
  --> tests/ui/cve_2019_16138/src/lib.rs:206:39
   |
LL |                 let mut ret = Vec::with_capacity(pixel_count);
   |                               ------------------------------- `std::vec::Vec` created but not initialized
...
LL |                     let chunks_iter = ret.chunks_mut(uszwidth);
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^
   |                                       |
   |                                       slice created here
   |                                       slice created with this length
   |                                       slice created with this pointer
   |
   = help: See https://doc.rust-lang.org/std/slice/fn.std::slice::from_raw_parts_mut.html
   = note: `#[deny(rpl::slice_from_raw_parts_uninitialized)]` on by default

error: it violates the precondition of `std::slice::from_raw_parts_mut` to create a slice from uninitialized data
  --> tests/ui/cve_2019_16138/src/lib.rs:218:65
   |
LL | ...                   let mut buf = Vec::<RGBE8Pixel>::with_capacity(uszwidth);
   |                                     ------------------------------------------ `std::vec::Vec` created but not initialized
...
LL | ...                   (read_scanline(&mut self.r, &mut buf[..]))?;
   |                                                           ^^^^
   |                                                           |
   |                                                           slice created here
   |                                                           slice created with this length
   |                                                           slice created with this pointer
   |
   = help: See https://doc.rust-lang.org/std/slice/fn.std::slice::from_raw_parts_mut.html

error: it usually isn’t necessary to apply #[inline] to private functions
  --> tests/ui/cve_2019_16138/src/lib.rs:267:13
   |
LL | /             fn advance(&mut self) {
LL | |
LL | |                 self.col += 1;
LL | |                 if self.col == self.buf.len() {
...  |
LL | |             }
   | |_____________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html
   = note: within a crate, the compiler generally makes good inline decisions
   = note: `#[deny(rpl::private_and_inline)]` on by default

error: it usually isn’t necessary to apply #[inline] to private functions
  --> tests/ui/cve_2019_16138/src/lib.rs:351:9
   |
LL | /         fn read_byte<R: BufRead>(r: &mut R) -> io::Result<u8> {
LL | |
LL | |             let mut buf = [0u8];
LL | |             r.read_exact(&mut buf[..])?;
LL | |             Ok(buf[0])
LL | |         }
   | |_________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html
   = note: within a crate, the compiler generally makes good inline decisions

error: it usually isn’t necessary to apply #[inline] to private functions
  --> tests/ui/cve_2019_16138/src/lib.rs:360:9
   |
LL | /         fn decode_component<R: BufRead, S: FnMut(usize, u8)>(
LL | |
LL | |             r: &mut R,
LL | |             width: usize,
...  |
LL | |             Ok(())
LL | |         }
   | |_________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html
   = note: within a crate, the compiler generally makes good inline decisions

error: it usually isn’t necessary to apply #[inline] to private functions
  --> tests/ui/cve_2019_16138/src/lib.rs:424:13
   |
LL | /             fn rl_marker(pix: RGBE8Pixel) -> Option<usize> {
LL | |
LL | |
LL | |                 if pix.c == [1, 1, 1] {
...  |
LL | |             }
   | |_____________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html
   = note: within a crate, the compiler generally makes good inline decisions

error: it usually isn’t necessary to apply #[inline] to private functions
  --> tests/ui/cve_2019_16138/src/lib.rs:424:13
   |
LL | /             fn rl_marker(pix: RGBE8Pixel) -> Option<usize> {
LL | |
LL | |
LL | |                 if pix.c == [1, 1, 1] {
...  |
LL | |             }
   | |_____________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html
   = note: within a crate, the compiler generally makes good inline decisions
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: aborting due to 10 previous errors

