error: Use `Vec::set_len` to extend the length of a `Vec`, potentially including uninitialized elements
  --> tests/ui/cve_2021_29941_2/cve_2021_29941_2_from_raw_parts.rs:12:13
   |
LL |     let mut vec = Vec::with_capacity(len);
   |                   ----------------------- `Vec` created here
...
LL |         vec.set_len(len);
   |             ^^^^^^^^^^^^ `Vec::set_len` called here
   |
   = note: make sure all elements are initialized before using them
   = note: `#[deny(rpl::set_len_to_extend)]` on by default

error: it violates the precondition of `Vec::set_len` to extend a `Vec`'s length without initializing its content in advance
  --> tests/ui/cve_2021_29941_2/cve_2021_29941_2_from_raw_parts.rs:12:13
   |
LL |     let mut vec = Vec::with_capacity(len);
   |                   ----------------------- `Vec` created here
...
LL |         vec.set_len(len);
   |             ^^^^^^^^^^^^ `Vec::set_len` called here
   |
   = help: before calling `set_len` to extend its length, make sure all elements are initialized, using such as `spare_capacity_mut` or `as_mut_ptr`
   = note: `-D rpl::set-len-uninitialized` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(rpl::set_len_uninitialized)]`

error: it is unsound to trust return value of `std::iter::ExactSizeIterator::len` and pass it to an unsafe function like `std::vec::Vec::set_len`, which may leak uninitialized memory
  --> tests/ui/cve_2021_29941_2/cve_2021_29941_2_from_raw_parts.rs:12:13
   |
LL |     let len = bla.len();
   |               --------- `std::iter::ExactSizeIterator::len` used here
...
LL |         vec.set_len(len);
   |             ^^^^^^^^^^^^
   |
   = help: incorrect implementation of `std::iter::ExactSizeIterator::len` must not cause safety issues

error: it violates the precondition of `std::slice::from_raw_parts_mut` to create a slice from uninitialized data
  --> tests/ui/cve_2021_29941_2/cve_2021_29941_2_from_raw_parts.rs:5:36
   |
LL |     let len = bla.len();
   |               --------- slice created with this length
LL |     let mut vec = Vec::with_capacity(len);
   |                   ----------------------- `std::vec::Vec` created but not initialized
LL |     let arr: &mut [u32] = unsafe { std::slice::from_raw_parts_mut(vec.as_mut_ptr(), len) };
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------^^^^^^
   |                                                                       |
   |                                                                       slice created with this pointer
   |
   = help: See https://doc.rust-lang.org/std/slice/fn.std::slice::from_raw_parts_mut.html

error: aborting due to 4 previous errors

