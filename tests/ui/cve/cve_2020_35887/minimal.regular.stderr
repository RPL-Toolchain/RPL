error: resulting pointer `*mut T` has a different alignment than the original alignment that the pointer was created with
  --> tests/ui/cve/cve_2020_35887/minimal.rs:10:24
   |
LL |     let ptr = unsafe { alloc(layout) as *mut T };
   |                        -------------^^^^^^^^^^
   |                        |
   |                        pointer created here
   |                        pointer casted here
   |
   = note: See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.alloc
   = note: `-D rpl::misaligned-pointer` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(rpl::misaligned_pointer)]`

error: public function `new_from_template` allocates a pointer that may be zero-sized, which is an undefined behavior
  --> tests/ui/cve/cve_2020_35887/minimal.rs:10:24
   |
LL | pub fn new_from_template<T: Clone>(size: usize, template: &T) {
   |                                    ---- size passed in here
...
LL |     let ptr = unsafe { alloc(layout) as *mut T };
   |                        ^^^^^^^^^^^^^ pointer created here
   |
   = note: See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#method.alloc
   = note: `#[deny(rpl::alloc_maybe_zero)]` on by default

error: resulting pointer `*mut Align32` has a different alignment than the original alignment that the pointer was created with
  --> tests/ui/cve/cve_2020_35887/minimal.rs:29:24
   |
LL |     let ptr = unsafe { alloc(layout) as *mut Align32 };
   |                        -------------^^^^^^^^^^^^^^^^
   |                        |
   |                        pointer created here
   |                        pointer casted here
   |
   = note: See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.alloc

error: public function `new_from_template_32_8` allocates a pointer that may be zero-sized, which is an undefined behavior
  --> tests/ui/cve/cve_2020_35887/minimal.rs:29:24
   |
LL | pub fn new_from_template_32_8(size: usize, template: &Align32) {
   |                               ---- size passed in here
...
LL |     let ptr = unsafe { alloc(layout) as *mut Align32 };
   |                        ^^^^^^^^^^^^^ pointer created here
   |
   = note: See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#method.alloc

error: resulting pointer `*mut u64` has a different alignment than the original alignment that the pointer was created with
  --> tests/ui/cve/cve_2020_35887/minimal.rs:44:24
   |
LL |     let ptr = unsafe { alloc(layout) as *mut u64 };
   |                        -------------^^^^^^^^^^^^
   |                        |
   |                        pointer created here
   |                        pointer casted here
   |
   = note: See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.alloc

error: public function `new_from_template_8_1` allocates a pointer that may be zero-sized, which is an undefined behavior
  --> tests/ui/cve/cve_2020_35887/minimal.rs:44:24
   |
LL | pub fn new_from_template_8_1(size: usize, template: &u64) {
   |                              ---- size passed in here
...
LL |     let ptr = unsafe { alloc(layout) as *mut u64 };
   |                        ^^^^^^^^^^^^^ pointer created here
   |
   = note: See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#method.alloc

error: public function `new_from_template_8_8` allocates a pointer that may be zero-sized, which is an undefined behavior
  --> tests/ui/cve/cve_2020_35887/minimal.rs:59:24
   |
LL | pub fn new_from_template_8_8(size: usize, template: &u64) {
   |                              ---- size passed in here
...
LL |     let ptr = unsafe { alloc(layout) as *mut u64 };
   |                        ^^^^^^^^^^^^^ pointer created here
   |
   = note: See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#method.alloc

error: public function `new_from_template_1_8` allocates a pointer that may be zero-sized, which is an undefined behavior
  --> tests/ui/cve/cve_2020_35887/minimal.rs:73:24
   |
LL | pub fn new_from_template_1_8(size: usize, template: &u8) {
   |                              ---- size passed in here
...
LL |     let ptr = unsafe { alloc(layout) };
   |                        ^^^^^^^^^^^^^ pointer created here
   |
   = note: See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#method.alloc

error: aborting due to 8 previous errors

