error: calling `set_len()` immediately after reserving a buffer creates uninitialized values
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:200:31
   |
LL |                 let mut ret = Vec::with_capacity(pixel_count);
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
LL |                     ret.set_len(pixel_count);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: initialize the buffer or wrap the content in `MaybeUninit`
   = note: `#[deny(rpl::uninit_vec)]` on by default

error: it violates the precondition of `Vec::set_len` to extend a `Vec`'s length without initializing its content in advance
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:203:21
   |
LL |                 let mut ret = Vec::with_capacity(pixel_count);
   |                               ------------------------------- `Vec` created here
...
LL |                     ret.set_len(pixel_count);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ `Vec::set_len` called here
   |
   = help: before calling `set_len` to extend its length, make sure all elements are initialized, using such as `spare_capacity_mut` or `as_mut_ptr`
   = note: `#[deny(rpl::set_len_uninitialized)]` on by default

error: calling `set_len()` immediately after reserving a buffer creates uninitialized values
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:213:43
   |
LL | ...                   let mut buf = Vec::<RGBE8Pixel>::with_capacity(uszwidth);
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
LL | ...                   unsafe {
LL | ...                       buf.set_len(uszwidth);
   |                           ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: initialize the buffer or wrap the content in `MaybeUninit`

error: it violates the precondition of `Vec::set_len` to extend a `Vec`'s length without initializing its content in advance
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:215:33
   |
LL | ...                   let mut buf = Vec::<RGBE8Pixel>::with_capacity(uszwidth);
   |                                     ------------------------------------------ `Vec` created here
LL | ...                   unsafe {
LL | ...                       buf.set_len(uszwidth);
   |                           ^^^^^^^^^^^^^^^^^^^^^ `Vec::set_len` called here
   |
   = help: before calling `set_len` to extend its length, make sure all elements are initialized, using such as `spare_capacity_mut` or `as_mut_ptr`

error: it usually isn't necessary to apply #[inline] to private functions
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:265:13
   |
LL |               #[inline]
   |               --------- `#[inline]` here
LL | /             fn advance(&mut self) {
LL | |
LL | |
LL | |                 self.col += 1;
...  |
LL | |             }
   | |_____________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html
   = note: the compiler generally makes good inline decisions about private functions
   = note: `-D rpl::private-function-marked-inline` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(rpl::private_function_marked_inline)]`

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:265:13
   |
LL |               #[inline]
   |               --------- `#[inline]` here
LL | /             fn advance(&mut self) {
LL | |
LL | |
LL | |                 self.col += 1;
...  |
LL | |             }
   | |_____________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)
   = note: `-D rpl::generic-function-marked-inline` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(rpl::generic_function_marked_inline)]`

error: it usually isn't necessary to apply #[inline] to private functions
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:350:9
   |
LL |           #[inline(always)]
   |           ----------------- `#[inline]` here
LL | /         fn read_byte<R: BufRead>(r: &mut R) -> io::Result<u8> {
LL | |
LL | |
LL | |             let mut buf = [0u8];
LL | |             r.read_exact(&mut buf[..])?;
LL | |             Ok(buf[0])
LL | |         }
   | |_________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html
   = note: the compiler generally makes good inline decisions about private functions

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:350:9
   |
LL |           #[inline(always)]
   |           ----------------- `#[inline]` here
LL | /         fn read_byte<R: BufRead>(r: &mut R) -> io::Result<u8> {
LL | |
LL | |
LL | |             let mut buf = [0u8];
LL | |             r.read_exact(&mut buf[..])?;
LL | |             Ok(buf[0])
LL | |         }
   | |_________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: it usually isn't necessary to apply #[inline] to private functions
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:360:9
   |
LL |           #[inline]
   |           --------- `#[inline]` here
LL | /         fn decode_component<R: BufRead, S: FnMut(usize, u8)>(
LL | |
LL | |
LL | |             r: &mut R,
...  |
LL | |             Ok(())
LL | |         }
   | |_________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html
   = note: the compiler generally makes good inline decisions about private functions

error: it usually isn't necessary to apply #[inline] to generic functions
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:360:9
   |
LL |           #[inline]
   |           --------- `#[inline]` here
LL | /         fn decode_component<R: BufRead, S: FnMut(usize, u8)>(
LL | |
LL | |
LL | |             r: &mut R,
...  |
LL | |             Ok(())
LL | |         }
   | |_________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html and https://rustc-dev-guide.rust-lang.org/backend/monomorph.html
   = note: generic functions are always `#[inline]` (monomorphization)

error: it usually isn't necessary to apply #[inline] to private functions
  --> tests/ui/cve/cve_2019_16138/src/lib.rs:425:13
   |
LL |               #[inline]
   |               --------- `#[inline]` here
LL | /             fn rl_marker(pix: RGBE8Pixel) -> Option<usize> {
LL | |
LL | |                 if pix.c == [1, 1, 1] {
LL | |                     Some(pix.e as usize)
...  |
LL | |             }
   | |_____________^ `#[inline]` applied here
   |
   = help: See https://matklad.github.io/2021/07/09/inline-in-rust.html
   = note: the compiler generally makes good inline decisions about private functions

error: aborting due to 11 previous errors

