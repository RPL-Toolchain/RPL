note: Item(
          Item {
              ident: Arc#0,
              owner_id: DefId(dump_hir::{use#1}),
              kind: Use(
                  Path {
                      span: tests/ui/utils/dump_hir.rs:9:5: 9:19 (#0),
                      res: [
                          Def(
                              Struct,
                              DefId(alloc::sync::Arc),
                          ),
                      ],
                      segments: [
                          PathSegment {
                              ident: std#0,
                              hir_id: HirId(DefId(dump_hir::{use#1}).1),
                              res: Def(
                                  Mod,
                                  DefId(std),
                              ),
                              args: None,
                              infer_args: false,
                          },
                          PathSegment {
                              ident: sync#0,
                              hir_id: HirId(DefId(dump_hir::{use#1}).2),
                              res: Def(
                                  Mod,
                                  DefId(std::sync),
                              ),
                              args: None,
                              infer_args: false,
                          },
                          PathSegment {
                              ident: Arc#0,
                              hir_id: HirId(DefId(dump_hir::{use#1}).3),
                              res: Err,
                              args: None,
                              infer_args: false,
                          },
                      ],
                  },
                  Single,
              ),
              span: tests/ui/utils/dump_hir.rs:9:1: 9:20 (#0),
              vis_span: tests/ui/utils/dump_hir.rs:9:1: 9:1 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:9:5
   |
LL | #[rpl::dump_hir]
   | ---------------- HIR dumpped because of this attribute
...
LL | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

note: Item(
          Item {
              ident: m#0,
              owner_id: DefId(dump_hir::m),
              kind: Mod(
                  Mod {
                      spans: ModSpans {
                          inner_span: tests/ui/utils/dump_hir.rs:14:5: 15:2 (#0),
                          inject_use_span: tests/ui/utils/dump_hir.rs:14:5: 14:5 (#0),
                      },
                      item_ids: [
                          ItemId {
                              owner_id: DefId(dump_hir::m::foo),
                          },
                      ],
                  },
              ),
              span: tests/ui/utils/dump_hir.rs:12:1: 15:2 (#0),
              vis_span: tests/ui/utils/dump_hir.rs:12:1: 12:1 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:12:1
   |
LL | #[rpl::dump_hir]
   | ---------------- HIR dumpped because of this attribute
LL | mod m {
   | ^^^^^

note: Item(
          Item {
              ident: Foo#0,
              owner_id: DefId(dump_hir::Foo),
              kind: Trait(
                  No,
                  Safe,
                  Generics {
                      params: [],
                      predicates: [],
                      has_where_clause_predicates: false,
                      where_clause_span: tests/ui/utils/dump_hir.rs:18:10: 18:10 (#0),
                      span: tests/ui/utils/dump_hir.rs:18:10: 18:10 (#0),
                  },
                  [],
                  [
                      TraitItemRef {
                          id: TraitItemId {
                              owner_id: DefId(dump_hir::Foo::N),
                          },
                          ident: N#0,
                          kind: Const,
                          span: tests/ui/utils/dump_hir.rs:21:5: 21:20 (#0),
                      },
                  ],
              ),
              span: tests/ui/utils/dump_hir.rs:18:1: 22:2 (#0),
              vis_span: tests/ui/utils/dump_hir.rs:18:1: 18:1 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:18:1
   |
LL | #[rpl::dump_hir]
   | ---------------- HIR dumpped because of this attribute
LL | trait Foo {
   | ^^^^^^^^^

note: TraitItem(
          TraitItem {
              ident: N#0,
              owner_id: DefId(dump_hir::Foo::N),
              generics: Generics {
                  params: [],
                  predicates: [],
                  has_where_clause_predicates: false,
                  where_clause_span: tests/ui/utils/dump_hir.rs:21:19: 21:19 (#0),
                  span: tests/ui/utils/dump_hir.rs:21:12: 21:12 (#0),
              },
              kind: Const(
                  Ty {
                      hir_id: HirId(DefId(dump_hir::Foo::N).1),
                      span: tests/ui/utils/dump_hir.rs:21:14: 21:19 (#0),
                      kind: Path(
                          Resolved(
                              None,
                              Path {
                                  span: tests/ui/utils/dump_hir.rs:21:14: 21:19 (#0),
                                  res: PrimTy(
                                      Uint(
                                          Usize,
                                      ),
                                  ),
                                  segments: [
                                      PathSegment {
                                          ident: usize#0,
                                          hir_id: HirId(DefId(dump_hir::Foo::N).2),
                                          res: PrimTy(
                                              Uint(
                                                  Usize,
                                              ),
                                          ),
                                          args: None,
                                          infer_args: false,
                                      },
                                  ],
                              },
                          ),
                      ),
                  },
                  None,
              ),
              span: tests/ui/utils/dump_hir.rs:21:5: 21:20 (#0),
              defaultness: Default {
                  has_value: false,
              },
          },
      )
  --> tests/ui/utils/dump_hir.rs:21:5
   |
LL |     #[rpl::dump_hir]
   |     ---------------- HIR dumpped because of this attribute
LL |     const N: usize;
   |     ^^^^^^^^^^^^^^

note: Item(
          Item {
              ident: #0,
              owner_id: DefId(dump_hir::{impl#0}),
              kind: Impl(
                  Impl {
                      constness: NotConst,
                      safety: Safe,
                      polarity: "positive",
                      defaultness: Final,
                      defaultness_span: None,
                      generics: Generics {
                          params: [],
                          predicates: [],
                          has_where_clause_predicates: false,
                          where_clause_span: tests/ui/utils/dump_hir.rs:25:16: 25:16 (#0),
                          span: tests/ui/utils/dump_hir.rs:25:5: 25:5 (#0),
                      },
                      of_trait: Some(
                          TraitRef {
                              path: Path {
                                  span: tests/ui/utils/dump_hir.rs:25:6: 25:9 (#0),
                                  res: Def(
                                      Trait,
                                      DefId(dump_hir::Foo),
                                  ),
                                  segments: [
                                      PathSegment {
                                          ident: Foo#0,
                                          hir_id: HirId(DefId(dump_hir::{impl#0}).1),
                                          res: Def(
                                              Trait,
                                              DefId(dump_hir::Foo),
                                          ),
                                          args: None,
                                          infer_args: false,
                                      },
                                  ],
                              },
                              hir_ref_id: HirId(DefId(dump_hir::{impl#0}).2),
                          },
                      ),
                      self_ty: Ty {
                          hir_id: HirId(DefId(dump_hir::{impl#0}).3),
                          span: tests/ui/utils/dump_hir.rs:25:14: 25:16 (#0),
                          kind: Tup(
                              [],
                          ),
                      },
                      items: [
                          ImplItemRef {
                              id: ImplItemId {
                                  owner_id: DefId(dump_hir::{impl#0}::N),
                              },
                              ident: N#0,
                              kind: Const,
                              span: tests/ui/utils/dump_hir.rs:28:5: 28:30 (#0),
                              trait_item_def_id: Some(
                                  DefId(dump_hir::Foo::N),
                              ),
                          },
                      ],
                  },
              ),
              span: tests/ui/utils/dump_hir.rs:25:1: 29:2 (#0),
              vis_span: tests/ui/utils/dump_hir.rs:25:1: 25:1 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:25:1
   |
LL | #[rpl::dump_hir]
   | ---------------- HIR dumpped because of this attribute
LL | impl Foo for () {
   | ^^^^^^^^^^^^^^^

note: ImplItem(
          ImplItem {
              ident: N#0,
              owner_id: DefId(dump_hir::{impl#0}::N),
              generics: Generics {
                  params: [],
                  predicates: [],
                  has_where_clause_predicates: false,
                  where_clause_span: tests/ui/utils/dump_hir.rs:28:19: 28:19 (#0),
                  span: tests/ui/utils/dump_hir.rs:28:12: 28:12 (#0),
              },
              kind: Const(
                  Ty {
                      hir_id: HirId(DefId(dump_hir::{impl#0}::N).1),
                      span: tests/ui/utils/dump_hir.rs:28:14: 28:19 (#0),
                      kind: Path(
                          Resolved(
                              None,
                              Path {
                                  span: tests/ui/utils/dump_hir.rs:28:14: 28:19 (#0),
                                  res: PrimTy(
                                      Uint(
                                          Usize,
                                      ),
                                  ),
                                  segments: [
                                      PathSegment {
                                          ident: usize#0,
                                          hir_id: HirId(DefId(dump_hir::{impl#0}::N).2),
                                          res: PrimTy(
                                              Uint(
                                                  Usize,
                                              ),
                                          ),
                                          args: None,
                                          infer_args: false,
                                      },
                                  ],
                              },
                          ),
                      ),
                  },
                  BodyId {
                      hir_id: HirId(DefId(dump_hir::{impl#0}::N).3),
                  },
              ),
              defaultness: Final,
              span: tests/ui/utils/dump_hir.rs:28:5: 28:30 (#0),
              vis_span: tests/ui/utils/dump_hir.rs:28:5: 28:5 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:28:5
   |
LL |     #[rpl::dump_hir]
   |     ---------------- HIR dumpped because of this attribute
LL |     const N: usize = 0_usize;
   |     ^^^^^^^^^^^^^^

note: Item(
          Item {
              ident: main#0,
              owner_id: DefId(dump_hir::main),
              kind: Fn {
                  sig: FnSig {
                      header: FnHeader {
                          safety: Normal(
                              Safe,
                          ),
                          constness: NotConst,
                          asyncness: NotAsync,
                          abi: Rust,
                      },
                      decl: FnDecl {
                          inputs: [],
                          output: DefaultReturn(
                              tests/ui/utils/dump_hir.rs:32:10: 32:10 (#0),
                          ),
                          c_variadic: false,
                          implicit_self: None,
                          lifetime_elision_allowed: false,
                      },
                      span: tests/ui/utils/dump_hir.rs:32:1: 32:10 (#0),
                  },
                  generics: Generics {
                      params: [],
                      predicates: [],
                      has_where_clause_predicates: false,
                      where_clause_span: tests/ui/utils/dump_hir.rs:32:10: 32:10 (#0),
                      span: tests/ui/utils/dump_hir.rs:32:8: 32:8 (#0),
                  },
                  body: BodyId {
                      hir_id: HirId(DefId(dump_hir::main).75),
                  },
                  has_body: true,
              },
              span: tests/ui/utils/dump_hir.rs:32:1: 67:2 (#0),
              vis_span: tests/ui/utils/dump_hir.rs:32:1: 32:1 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:32:1
   |
LL | #[rpl::dump_hir]
   | ---------------- HIR dumpped because of this attribute
LL | fn main() {
   | ^^^^^^^^^

note: Stmt(
          Stmt {
              hir_id: HirId(DefId(dump_hir::main).2),
              kind: Let(
                  LetStmt {
                      pat: Pat {
                          hir_id: HirId(DefId(dump_hir::main).10),
                          kind: Binding(
                              BindingMode(
                                  No,
                                  Not,
                              ),
                              HirId(DefId(dump_hir::main).10),
                              x#0,
                              None,
                          ),
                          span: tests/ui/utils/dump_hir.rs:35:9: 35:10 (#0),
                          default_binding_modes: true,
                      },
                      ty: None,
                      init: Some(
                          Expr {
                              hir_id: HirId(DefId(dump_hir::main).3),
                              kind: Call(
                                  Expr {
                                      hir_id: HirId(DefId(dump_hir::main).4),
                                      kind: Path(
                                          TypeRelative(
                                              Ty {
                                                  hir_id: HirId(DefId(dump_hir::main).6),
                                                  span: tests/ui/utils/dump_hir.rs:35:13: 35:16 (#0),
                                                  kind: Path(
                                                      Resolved(
                                                          None,
                                                          Path {
                                                              span: tests/ui/utils/dump_hir.rs:35:13: 35:16 (#0),
                                                              res: Def(
                                                                  Struct,
                                                                  DefId(alloc::sync::Arc),
                                                              ),
                                                              segments: [
                                                                  PathSegment {
                                                                      ident: Arc#0,
                                                                      hir_id: HirId(DefId(dump_hir::main).5),
                                                                      res: Def(
                                                                          Struct,
                                                                          DefId(alloc::sync::Arc),
                                                                      ),
                                                                      args: None,
                                                                      infer_args: true,
                                                                  },
                                                              ],
                                                          },
                                                      ),
                                                  ),
                                              },
                                              PathSegment {
                                                  ident: new#0,
                                                  hir_id: HirId(DefId(dump_hir::main).7),
                                                  res: Err,
                                                  args: None,
                                                  infer_args: true,
                                              },
                                          ),
                                      ),
                                      span: tests/ui/utils/dump_hir.rs:35:13: 35:21 (#0),
                                  },
                                  [
                                      Expr {
                                          hir_id: HirId(DefId(dump_hir::main).8),
                                          kind: Lit(
                                              Spanned {
                                                  node: Int(
                                                      Pu128(
                                                          0,
                                                      ),
                                                      Unsigned(
                                                          Usize,
                                                      ),
                                                  ),
                                                  span: tests/ui/utils/dump_hir.rs:35:22: 35:29 (#0),
                                              },
                                          ),
                                          span: tests/ui/utils/dump_hir.rs:35:22: 35:29 (#0),
                                      },
                                  ],
                              ),
                              span: tests/ui/utils/dump_hir.rs:35:13: 35:30 (#0),
                          },
                      ),
                      els: None,
                      hir_id: HirId(DefId(dump_hir::main).9),
                      span: tests/ui/utils/dump_hir.rs:35:5: 35:31 (#0),
                      source: Normal,
                  },
              ),
              span: tests/ui/utils/dump_hir.rs:35:5: 35:31 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:35:5
   |
LL |     #[rpl::dump_hir]
   |     ---------------- HIR dumpped because of this attribute
LL |     let x = Arc::new(0_usize);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

note: Item(
          Item {
              ident: foo#0,
              owner_id: DefId(dump_hir::main::foo),
              kind: Fn {
                  sig: FnSig {
                      header: FnHeader {
                          safety: Normal(
                              Safe,
                          ),
                          constness: NotConst,
                          asyncness: NotAsync,
                          abi: Rust,
                      },
                      decl: FnDecl {
                          inputs: [],
                          output: DefaultReturn(
                              tests/ui/utils/dump_hir.rs:38:13: 38:13 (#0),
                          ),
                          c_variadic: false,
                          implicit_self: None,
                          lifetime_elision_allowed: false,
                      },
                      span: tests/ui/utils/dump_hir.rs:38:5: 38:13 (#0),
                  },
                  generics: Generics {
                      params: [],
                      predicates: [],
                      has_where_clause_predicates: false,
                      where_clause_span: tests/ui/utils/dump_hir.rs:38:13: 38:13 (#0),
                      span: tests/ui/utils/dump_hir.rs:38:11: 38:11 (#0),
                  },
                  body: BodyId {
                      hir_id: HirId(DefId(dump_hir::main::foo).4),
                  },
                  has_body: true,
              },
              span: tests/ui/utils/dump_hir.rs:38:5: 42:6 (#0),
              vis_span: tests/ui/utils/dump_hir.rs:38:5: 38:5 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:38:5
   |
LL |     #[rpl::dump_hir]
   |     ---------------- HIR dumpped because of this attribute
LL |     fn foo() {
   |     ^^^^^^^^

note: Expr(
          Expr {
              hir_id: HirId(DefId(dump_hir::main::foo).2),
              kind: Block(
                  Block {
                      stmts: [],
                      expr: None,
                      hir_id: HirId(DefId(dump_hir::main::foo).3),
                      rules: DefaultBlock,
                      span: tests/ui/utils/dump_hir.rs:41:9: 41:11 (#0),
                      targeted_by_break: false,
                  },
                  None,
              ),
              span: tests/ui/utils/dump_hir.rs:41:9: 41:11 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:41:9
   |
LL |         #[rpl::dump_hir]
   |         ---------------- HIR dumpped because of this attribute
LL |         {}
   |         ^^

note: Expr(
          Expr {
              hir_id: HirId(DefId(dump_hir::main).12),
              kind: If(
                  Expr {
                      hir_id: HirId(DefId(dump_hir::main).14),
                      kind: DropTemps(
                          Expr {
                              hir_id: HirId(DefId(dump_hir::main).13),
                              kind: Lit(
                                  Spanned {
                                      node: Bool(
                                          true,
                                      ),
                                      span: tests/ui/utils/dump_hir.rs:45:8: 45:12 (#0),
                                  },
                              ),
                              span: tests/ui/utils/dump_hir.rs:45:8: 45:12 (#0),
                          },
                      ),
                      span: tests/ui/utils/dump_hir.rs:45:8: 45:12 (#11),
                  },
                  Expr {
                      hir_id: HirId(DefId(dump_hir::main).16),
                      kind: Block(
                          Block {
                              stmts: [],
                              expr: None,
                              hir_id: HirId(DefId(dump_hir::main).15),
                              rules: DefaultBlock,
                              span: tests/ui/utils/dump_hir.rs:45:13: 47:6 (#0),
                              targeted_by_break: false,
                          },
                          None,
                      ),
                      span: tests/ui/utils/dump_hir.rs:45:13: 47:6 (#0),
                  },
                  Some(
                      Expr {
                          hir_id: HirId(DefId(dump_hir::main).17),
                          kind: Block(
                              Block {
                                  stmts: [],
                                  expr: None,
                                  hir_id: HirId(DefId(dump_hir::main).18),
                                  rules: DefaultBlock,
                                  span: tests/ui/utils/dump_hir.rs:47:12: 48:6 (#0),
                                  targeted_by_break: false,
                              },
                              None,
                          ),
                          span: tests/ui/utils/dump_hir.rs:47:12: 48:6 (#0),
                      },
                  ),
              ),
              span: tests/ui/utils/dump_hir.rs:45:5: 48:6 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:45:5
   |
LL |       #[rpl::dump_hir]
   |       ---------------- HIR dumpped because of this attribute
LL | /     if true {
LL | |
LL | |     } else {
LL | |     }
   | |_____^

note: Expr(
          Expr {
              hir_id: HirId(DefId(dump_hir::main).20),
              kind: Call(
                  Expr {
                      hir_id: HirId(DefId(dump_hir::main).21),
                      kind: Path(
                          Resolved(
                              None,
                              Path {
                                  span: tests/ui/utils/dump_hir.rs:51:5: 51:23 (#0),
                                  res: Def(
                                      Fn,
                                      DefId(std::thread::spawn),
                                  ),
                                  segments: [
                                      PathSegment {
                                          ident: std#0,
                                          hir_id: HirId(DefId(dump_hir::main).22),
                                          res: Def(
                                              Mod,
                                              DefId(std),
                                          ),
                                          args: None,
                                          infer_args: true,
                                      },
                                      PathSegment {
                                          ident: thread#0,
                                          hir_id: HirId(DefId(dump_hir::main).23),
                                          res: Def(
                                              Mod,
                                              DefId(std::thread),
                                          ),
                                          args: None,
                                          infer_args: true,
                                      },
                                      PathSegment {
                                          ident: spawn#0,
                                          hir_id: HirId(DefId(dump_hir::main).24),
                                          res: Def(
                                              Fn,
                                              DefId(std::thread::spawn),
                                          ),
                                          args: None,
                                          infer_args: true,
                                      },
                                  ],
                              },
                          ),
                      ),
                      span: tests/ui/utils/dump_hir.rs:51:5: 51:23 (#0),
                  },
                  [
                      Expr {
                          hir_id: HirId(DefId(dump_hir::main).25),
                          kind: Closure(
                              Closure {
                                  def_id: DefId(dump_hir::main::{closure#0}),
                                  binder: Default,
                                  constness: NotConst,
                                  capture_clause: Value {
                                      move_kw: tests/ui/utils/dump_hir.rs:51:24: 51:28 (#0),
                                  },
                                  bound_generic_params: [],
                                  fn_decl: FnDecl {
                                      inputs: [],
                                      output: DefaultReturn(
                                          tests/ui/utils/dump_hir.rs:51:31: 51:31 (#0),
                                      ),
                                      c_variadic: false,
                                      implicit_self: None,
                                      lifetime_elision_allowed: false,
                                  },
                                  body: BodyId {
                                      hir_id: HirId(DefId(dump_hir::main).26),
                                  },
                                  fn_decl_span: tests/ui/utils/dump_hir.rs:51:24: 51:31 (#0),
                                  fn_arg_span: Some(
                                      tests/ui/utils/dump_hir.rs:51:29: 51:31 (#0),
                                  ),
                                  kind: Closure,
                              },
                          ),
                          span: tests/ui/utils/dump_hir.rs:51:24: 54:6 (#0),
                      },
                  ],
              ),
              span: tests/ui/utils/dump_hir.rs:51:5: 54:7 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:51:5
   |
LL |       #[rpl::dump_hir]
   |       ---------------- HIR dumpped because of this attribute
LL | /     std::thread::spawn(move || {
LL | |
LL | |         println!("{x}");
LL | |     });
   | |______^

note: Item(
          Item {
              ident: mac#0,
              owner_id: DefId(dump_hir::main::mac),
              kind: Macro(
                  MacroDef {
                      body: DelimArgs {
                          dspan: DelimSpan {
                              open: tests/ui/utils/dump_hir.rs:57:22: 57:23 (#0),
                              close: tests/ui/utils/dump_hir.rs:63:5: 63:6 (#0),
                          },
                          delim: Brace,
                          tokens: TokenStream(
                              [
                                  Delimited(
                                      DelimSpan {
                                          open: tests/ui/utils/dump_hir.rs:59:9: 59:10 (#0),
                                          close: tests/ui/utils/dump_hir.rs:59:10: 59:11 (#0),
                                      },
                                      DelimSpacing {
                                          open: JointHidden,
                                          close: Alone,
                                      },
                                      Parenthesis,
                                      TokenStream(
                                          [],
                                      ),
                                  ),
                                  Token(
                                      Token {
                                          kind: FatArrow,
                                          span: tests/ui/utils/dump_hir.rs:59:12: 59:14 (#0),
                                      },
                                      Alone,
                                  ),
                                  Delimited(
                                      DelimSpan {
                                          open: tests/ui/utils/dump_hir.rs:59:15: 59:16 (#0),
                                          close: tests/ui/utils/dump_hir.rs:62:9: 62:10 (#0),
                                      },
                                      DelimSpacing {
                                          open: Alone,
                                          close: Joint,
                                      },
                                      Brace,
                                      TokenStream(
                                          [
                                              Token(
                                                  Token {
                                                      kind: Pound,
                                                      span: tests/ui/utils/dump_hir.rs:60:13: 60:14 (#0),
                                                  },
                                                  JointHidden,
                                              ),
                                              Delimited(
                                                  DelimSpan {
                                                      open: tests/ui/utils/dump_hir.rs:60:14: 60:15 (#0),
                                                      close: tests/ui/utils/dump_hir.rs:60:28: 60:29 (#0),
                                                  },
                                                  DelimSpacing {
                                                      open: JointHidden,
                                                      close: Alone,
                                                  },
                                                  Bracket,
                                                  TokenStream(
                                                      [
                                                          Token(
                                                              Token {
                                                                  kind: Ident(
                                                                      "rpl",
                                                                      No,
                                                                  ),
                                                                  span: tests/ui/utils/dump_hir.rs:60:15: 60:18 (#0),
                                                              },
                                                              Joint,
                                                          ),
                                                          Token(
                                                              Token {
                                                                  kind: PathSep,
                                                                  span: tests/ui/utils/dump_hir.rs:60:18: 60:20 (#0),
                                                              },
                                                              JointHidden,
                                                          ),
                                                          Token(
                                                              Token {
                                                                  kind: Ident(
                                                                      "dump_hir",
                                                                      No,
                                                                  ),
                                                                  span: tests/ui/utils/dump_hir.rs:60:20: 60:28 (#0),
                                                              },
                                                              JointHidden,
                                                          ),
                                                      ],
                                                  ),
                                              ),
                                              Token(
                                                  Token {
                                                      kind: Ident(
                                                          "println",
                                                          No,
                                                      ),
                                                      span: tests/ui/utils/dump_hir.rs:61:13: 61:20 (#0),
                                                  },
                                                  Joint,
                                              ),
                                              Token(
                                                  Token {
                                                      kind: Not,
                                                      span: tests/ui/utils/dump_hir.rs:61:20: 61:21 (#0),
                                                  },
                                                  JointHidden,
                                              ),
                                              Delimited(
                                                  DelimSpan {
                                                      open: tests/ui/utils/dump_hir.rs:61:21: 61:22 (#0),
                                                      close: tests/ui/utils/dump_hir.rs:61:28: 61:29 (#0),
                                                  },
                                                  DelimSpacing {
                                                      open: JointHidden,
                                                      close: Joint,
                                                  },
                                                  Parenthesis,
                                                  TokenStream(
                                                      [
                                                          Token(
                                                              Token {
                                                                  kind: Literal(
                                                                      Lit {
                                                                          kind: Str,
                                                                          symbol: "test",
                                                                          suffix: None,
                                                                      },
                                                                  ),
                                                                  span: tests/ui/utils/dump_hir.rs:61:22: 61:28 (#0),
                                                              },
                                                              JointHidden,
                                                          ),
                                                      ],
                                                  ),
                                              ),
                                              Token(
                                                  Token {
                                                      kind: Semi,
                                                      span: tests/ui/utils/dump_hir.rs:61:29: 61:30 (#0),
                                                  },
                                                  Alone,
                                              ),
                                          ],
                                      ),
                                  ),
                                  Token(
                                      Token {
                                          kind: Semi,
                                          span: tests/ui/utils/dump_hir.rs:62:10: 62:11 (#0),
                                      },
                                      Alone,
                                  ),
                              ],
                          ),
                      },
                      macro_rules: true,
                  },
                  Bang,
              ),
              span: tests/ui/utils/dump_hir.rs:57:5: 63:6 (#0),
              vis_span: tests/ui/utils/dump_hir.rs:57:5: 57:5 (#0),
          },
      )
  --> tests/ui/utils/dump_hir.rs:57:5
   |
LL |     #[rpl::dump_hir]
   |     ---------------- HIR dumpped because of this attribute
LL |     macro_rules! mac {
   |     ^^^^^^^^^^^^^^^^

error: abort due to debugging
  --> tests/ui/utils/dump_hir.rs:5:1
   |
LL | #[rpl::dump_hir]
   | ^^^^^^^^^^^^^^^^
...
LL | #[rpl::dump_hir]
   | ^^^^^^^^^^^^^^^^
...
LL | #[rpl::dump_hir]
   | ^^^^^^^^^^^^^^^^
...
LL |     #[rpl::dump_hir]
   |     ^^^^^^^^^^^^^^^^
...
LL | #[rpl::dump_hir]
   | ^^^^^^^^^^^^^^^^
...
LL |     #[rpl::dump_hir]
   |     ^^^^^^^^^^^^^^^^
...
LL | #[rpl::dump_hir]
   | ^^^^^^^^^^^^^^^^
...
LL |     #[rpl::dump_hir]
   |     ^^^^^^^^^^^^^^^^
...
LL |     #[rpl::dump_hir]
   |     ^^^^^^^^^^^^^^^^
...
LL |         #[rpl::dump_hir]
   |         ^^^^^^^^^^^^^^^^
...
LL |     #[rpl::dump_hir]
   |     ^^^^^^^^^^^^^^^^
...
LL |     #[rpl::dump_hir]
   |     ^^^^^^^^^^^^^^^^
...
LL |     #[rpl::dump_hir]
   |     ^^^^^^^^^^^^^^^^
   |
   = note: `#[rpl::dump_hir]`, `#[rpl::print_hir]` and `#[rpl::dump_mir]` are only used for debugging
   = note: this error is to remind you removing these attributes
help: remove this attribute
   |
LL - #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL - #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL - #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL -     #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL - #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL -     #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL - #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL -     #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL -     #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL -         #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL -     #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL -     #[rpl::dump_hir]
LL +
   |
help: remove this attribute
   |
LL -     #[rpl::dump_hir]
LL +
   |

error: aborting due to 1 previous error

