pattern CVE-2020-35887

patt {
    #[diag = "p_unchecked_ptr_offset"]
    pattern_unchecked_ptr_offset[$T: type, $U: type] =
        fn $pattern($len: $U, ..) -> _ {
            'ptr:
            let $ptr: *const $T = _;
            'offset:
            let $ptr_1: *const $T = Offset(copy $ptr, copy $len);
        }
    #[diag = "p_unchecked_ptr_offset"]
    pattern_unchecked_mut_ptr_offset[$T: type, $U: type] =
        fn $pattern($len: $U, ..) -> _ {
            'ptr:
            let $ptr: *mut $T = _;
            'offset:
            let $ptr_1: *mut $T = Offset(copy $ptr, copy $len);
        }
    #[diag = "p_unchecked_ptr_offset"]
    pattern_unchecked_ptr_casted_offset[$T: type, $U1: type, $U2: type] =
        fn $pattern($len: $U1, ..) -> _ {
            let $len2: $U2 = copy $len as $U2 (IntToInt);
            'ptr:
            let $ptr: *const $T = _;
            'offset:
            let $ptr_1: *const $T = Offset(copy $ptr, copy $len2);
        }
    #[diag = "p_unchecked_ptr_offset"]
    pattern_unchecked_mut_ptr_casted_offset[$T: type, $U1: type, $U2: type] =
        fn $pattern($len: $U1, ..) -> _ {
            let $len2: $U2 = copy $len as $U2 (IntToInt);
            'ptr:
            let $ptr: *mut $T = _;
            'offset:
            let $ptr_1: *mut $T = Offset(copy $ptr, copy $len2);
        }
    #[diag = "p_unchecked_ptr_offset"]
    pattern_unchecked_ptr_arith_offset[$T: type, $U: type] =
        fn $pattern($len: $U, ..) -> _ {
            'ptr:
            let $ptr: *const $T = _; // _8
            'offset:
            let $ptr_1: *const $T = std::intrinsics::arith_offset::<$T>(copy $ptr, copy $len); // _7
        }
    #[diag = "p_unchecked_ptr_offset"]
    pattern_unchecked_mut_ptr_arith_offset[$T: type, $U: type] =
        fn $pattern($len: $U, ..) -> _ {
            'ptr:
            let $ptr: *mut $T = _; // _8
            'offset:
            let $ptr_1: *mut $T = std::intrinsics::arith_offset::<$T>(copy $ptr, copy $len); // _7
        }
    #[diag = "p_unchecked_ptr_offset"]
    pattern_unchecked_ptr_casted_arith_offset[$T: type, $U1: type, $U2: type] =
        fn $pattern($len: $U1, ..) -> _ {
            let $len2: $U2 = copy $len as $U2 (IntToInt); // _6
            'ptr:
            let $ptr: *const $T = _; // _8
            'offset:
            let $ptr_1: *const $T = std::intrinsics::arith_offset::<$T>(copy $ptr, copy $len2); // _7
        }
    #[diag = "p_unchecked_ptr_offset"]
    pattern_unchecked_mut_ptr_casted_arith_offset[$T: type, $U1: type, $U2: type] =
        fn $pattern($len: $U1, ..) -> _ {
            let $len2: $U2 = copy $len as $U2 (IntToInt); // _6
            'ptr:
            let $ptr: *mut $T = _; // _8
            'offset:
            let $ptr_1: *mut $T = std::intrinsics::arith_offset::<$T>(copy $ptr, copy $len2); // _7
        }
}

diag {
    p_unchecked_ptr_offset = {
        primary(offset)  = "it is an undefined behavior to offset a pointer using an unchecked integer",
        label(offset)    = "offset here",
        label(ptr)       = "pointer used here",
        help             = "check whether it's in bound before offsetting",
        note             = "See the safety section in https://doc.rust-lang.org/std/primitive.pointer.html#method.offset",
        name             = "unchecked_pointer_offset",
        level            = "warn",
    }
}
