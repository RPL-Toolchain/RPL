pattern CVE-2021-27376

patt {
    use std::net::SocketAddrV4;
    use std::net::SocketAddrV6;
    use libc::sockaddr;

    #[diag = "p_v4"]
    p_const_const_v4 = unsafe? fn _ (..) -> _ {
        'src:
        let $src: *const SocketAddrV4 = _;
        'cast:
        let $dst: *const sockaddr = move $src as *const sockaddr (PtrToPtr);
    }

    #[diag = "p_v4"]
    p_mut_const_v4 = unsafe? fn _ (..) -> _ {
        'src:
        let $src: *mut SocketAddrV4 = _;
        'cast:
        let $dst: *const sockaddr = move $src as *const sockaddr (PtrToPtr);
    }
    
    #[diag = "p_v4"]
    p_const_mut_v4 = unsafe? fn _ (..) -> _ {
        'src:
        let $src: *const SocketAddrV4 = _;
        'cast:
        let $dst: *mut sockaddr = move $src as *mut sockaddr (PtrToPtr);
    }
    
    #[diag = "p_v4"]
    p_mut_mut_v4 = unsafe? fn _ (..) -> _ {
        'src:
        let $src: *mut SocketAddrV4 = _;
        'cast:
        let $dst: *mut sockaddr = move $src as *mut sockaddr (PtrToPtr);
    }

    #[diag = "p_v6"]
    p_const_const_v6 = unsafe? fn _ (..) -> _ {
        'src:
        let $src: *const SocketAddrV6 = _;
        'cast:
        let $dst: *const sockaddr = move $src as *const sockaddr (PtrToPtr);
    }

    #[diag = "p_v6"]
    p_mut_const_v6 = unsafe? fn _ (..) -> _ {
        'src:
        let $src: *mut SocketAddrV6 = _;
        'cast:
        let $dst: *const sockaddr = move $src as *const sockaddr (PtrToPtr);
    }
    
    #[diag = "p_v6"]
    p_const_mut_v6 = unsafe? fn _ (..) -> _ {
        'src:
        let $src: *const SocketAddrV6 = _;
        'cast:
        let $dst: *mut sockaddr = move $src as *mut sockaddr (PtrToPtr);
    }
    
    #[diag = "p_v6"]
    p_mut_mut_v6 = unsafe? fn _ (..) -> _ {
        'src:
        let $src: *mut SocketAddrV6 = _;
        'cast:
        let $dst: *mut sockaddr = move $src as *mut sockaddr (PtrToPtr);
    }
}

diag {
    p_v4 = {
        primary(cast) = "wrong assumption of layout compatibility from `std::net::SocketAddrV4` to `libc::sockaddr`",
        label(cast)   = "casted to `libc::sockaddr` here",
        help          = "it's not guaranteed by Rust standard library. See https://github.com/rust-lang/rust/pull/78802",
        note(src)     = "casted from this",
        level         = "deny",
        name          = "wrong_assumption_of_layout_compatibility",
    }
    p_v6 = {
        primary(cast) = "wrong assumption of layout compatibility from `std::net::SocketAddrV6` to `libc::sockaddr`",
        label(cast)   = "casted to `libc::sockaddr` here",
        help          = "it's not guaranteed by Rust standard library. See https://github.com/rust-lang/rust/pull/78802",
        note(src)     = "casted from this",
        level         = "deny",
        name          = "wrong_assumption_of_layout_compatibility",
    }
}
