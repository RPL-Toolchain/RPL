pattern CVE-2021-25905

patt {
    // #[diag = "p_slice_from_raw_parts_mut_uninitialized"]
    // p_slice_from_raw_parts_mut_uninitialized_inline[
    //     $T: type,
    //     $src: place(alloc::vec::Vec<$T>),
    // ] = {
    //     fn _(..) {
    //         // let $src: alloc::vec::Vec<$T> = _; // _1
    //         let $src_ref_1: &alloc::vec::Vec<$T> = &$src; // _3
    //         'len:
    //         // let $len: usize = _; // _2
    //         let $len: usize = copy (*$src_ref_1).len; // _2
    //         let $src_ref_2: &mut alloc::vec::Vec<$T> = &mut $src; // _7
    //         let $non_null: core::ptr::NonNull<$T> = copy (*$src_ref_2).buf.inner.ptr.pointer; // _17
    //         'ptr:
    //         let $ptr: *mut $T = copy $non_null as *mut $T (Transmute); // _6
    //         let $len_1: isize = copy $len as isize (IntToInt); // _8
    //         let $ptr_1: *mut $T = Offset(copy $ptr, copy $len_1); // _5
    //         let $src_ref_3: &alloc::vec::Vec<$T> = &$src; // _11
    //         let $capacity_no_high_bit: core::num::niche_types::UsizeNoHighBit = copy (*$src_ref_3).buf.inner.cap; // _12
    //         let $capacity: usize = copy $capacity_no_high_bit as usize (Transmute); // _10
    //         let $slice_len: usize = Sub(move $capacity, copy $len); // _9

    //         // let $ptr: *mut $T = _; // _6
    //         // let $slice_len: usize = _; // _9
    //         let $slice_ptr: *mut [$T] = *mut [$T] from (copy $ptr_1, copy $slice_len); // _20
    //         'slice:
    //         let $slice: &mut [$T] = &mut (*$slice_ptr); // _4
    //         // let $slice: &mut [$T] = _; // _4
    //     }
    // }

    p_slice_from_raw_parts_mut_uninitialized[
        $T: type,
        $src: place(alloc::vec::Vec<$T>),
    ] = {
        fn _(..) {
            // let $src: alloc::vec::Vec<$T> = _; // _1
            let $src_ref_1: &alloc::vec::Vec<$T> = &$src; // _3
            'len:
            // let $len: usize = _; // _2
            let $len: usize = alloc::vec::Vec::len(move $src_ref_1); // _2
            let $src_ref_2: &mut alloc::vec::Vec<$T> = &mut $src; // _7
            'ptr:
            let $ptr: *mut $T = alloc::vec::Vec::as_mut_ptr(move $src_ref_2); // _6
            let $len_1: isize = copy $len as isize (IntToInt); // _8
            let $ptr_1: *mut $T = mut_ptr::offset(move $ptr, move $len_1); // _5
            let $src_ref_3: &alloc::vec::Vec<$T> = &$src; // _11
            let $capacity: usize = alloc::vec::Vec::capacity(move $src_ref_3); // _10
            let $slice_len: usize = Sub(move $capacity, copy $len); // _9

            // let $ptr: *mut $T = _; // _6
            // let $slice_len: usize = _; // _9
            'slice:
            let $slice: &mut [$T] = core::slice::from_raw_parts_mut::<'_, u8>(move $ptr_1, move $slice_len); // _4
            // let $slice: &mut [$T] = _; // _4
        }
    }
}

diag {
    p_slice_from_raw_parts_uninitialized = {
        primary(slice) = "it violates the precondition of `std::slice::from_raw_parts` to create a slice from uninitialized part of a `Vec`",
        label(slice)   = "slice created here",
        label(len)     = "slice created with this length",
        label(ptr)     = "slice created with this pointer",
        help           = "See https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html#safety",
        level          = "deny",
        name           = "slice_from_raw_parts_uninitialized",
    }
    p_slice_from_raw_parts_mut_uninitialized = {
        primary(slice) = "it violates the precondition of `std::slice::from_raw_parts_mut` to create a slice from uninitialized part of a `Vec`",
        label(slice)   = "slice created here",
        label(len)     = "slice created with this length",
        label(ptr)     = "slice created with this pointer",
        help           = "See https://doc.rust-lang.org/std/slice/fn.from_raw_parts_mut.html#safety",
        level          = "deny",
        name           = "slice_from_raw_parts_uninitialized",
    }
}
