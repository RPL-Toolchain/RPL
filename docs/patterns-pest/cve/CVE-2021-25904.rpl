pattern CVE-2021-25904

patt {
    use std::option::Option;
    use std::iter::Iterator;

    #[diag = "p_unvalidated_slice_from_raw_parts"]
    p_unvalidated_slice_from_raw_parts_inline[
        $I: type,
        $T: type,
    ] = {
        pub fn _(..) {
            'src:
            let $src: $I = _;

            let $src_ref: &mut $I = &mut $src;

            let $next: Option<*const $T> = Iterator::next(move $src_ref);

            // let ptr: *const T = std::option::Option::unwrap(move next);
            'ptr:
            let $ptr: *const $T = move ($next as Some).0;

            // let slice: &[T] = std::slice::from_raw_parts::<'_, $T>(copy ptr, _);
            let $slice_ptr: *const [$T] = *const [$T] from (copy $ptr, _);
            'slice:
            let $slice: &[$T] = &*$slice_ptr;
        }
    }

    p_unvalidated_slice_from_raw_parts[
        $I: type,
        $T: type,
    ] = {
        pub fn _(..) {
            'src:
            let $src: $I = _;

            let $src_ref: &mut $I = &mut $src;

            let $next: std::option::Option<*const $T> = std::iter::Iterator::next(move $src_ref);

            'ptr:
            let $ptr: *const $T = std::option::Option::unwrap(move $next);

            'slice:
            let $slice: &[$T] = std::slice::from_raw_parts::<'_, $T>(copy $ptr, _);
        }
    }
}

diag {
    p_unvalidated_slice_from_raw_parts = {
        primary(src) = "it is unsound to trust pointers from passed-in iterators in a public safe function",
        label(src)   = "source iterator found here",
        label(ptr)   = "pointer created here",
        label(slice) = "used here to create a slice from the pointer",
        help         = "consider marking the function as unsafe",
        level        = "deny",
        name         = "unvalidated_slice_from_raw_parts",
    }
}
