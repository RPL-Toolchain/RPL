pattern CVE-2020-35873

patt {
    #[const(CString = "std::ffi::CString")]
    use_after_move[
        $SessT: type,
    ] = {
        // TODO: match the ABI of the function

        fn $ffi_call(_: *mut $SessT, _: *const std::ffi::c_char) -> i32;

        fn $pattern(..) -> _ {
            type CString = alloc::ffi::c_str::CString;
            type CStr = core::ffi::c_str::CStr;
            type NonNullU8 = core::ptr::non_null::NonNull<[u8]>;

            let $cstring: CString = _;
            let $cstring_ref: &CString = &$cstring;
            let $non_null: NonNullU8 = copy ((((*$cstring_ref).inner).0).pointer);
            let $cstr_ptr: *const CStr = copy $non_null as *const CStr (Transmute);
            let $cstr: &CStr = &(*$cstr_ptr);
            let $islice: *const [i8] = &raw const ((*$cstr).inner);
            let $iptr: *const i8 = move $islice as *const i8 (PtrToPtr);
            let $iptr_arg: *const i8;
            let $s: *mut $SessT;
            'drop:
            drop($cstring);

            $s = _;
            $iptr_arg = copy $iptr;
            'ptr_use:
            _ = $ffi_call(move $s, move $iptr_arg);
        }
    }
}

diag {
    use_after_move = {
        primary(ptr_use) = "use a pointer from `{$CString}` after dropped",
        label(ptr_use)   = "used here",
        note(drop)       = "the `{$CString}` value is dropped here",
        name             = "use_after_drop",
        level            = "deny",
    }
}
