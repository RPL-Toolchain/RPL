pattern unsound-collection-transmute

patt {
    p_vec_vec[
        $T: type, // element type before the cast
        $U: type, // element type after the cast
    ] = pub fn _ (..) -> _ {
        type SrcVec = alloc::vec::Vec<$T>;
        type DstVec = alloc::vec::Vec<$U>;
        'src:
        let $p: SrcVec = _;
        'cast:
        let $q: DstVec = move $p as DstVec (Transmute);
    // } where {
    //     !same_abi($T, $U) || !same_size($T, $U) || !same_align($T, $U)
    }
}

diag {
    p_vec_vec = {
        primary(cast) = "transmutes from `Vec<{$T}>` to `Vec<{$U}>` where `{$T}` and `{$U}` have different ABI, size or alignment",
        label(src)    = "casted from this",
        name          = "unsound_collection_transmute",
    }
}