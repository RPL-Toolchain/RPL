pattern allow-unchecked

patt {
    unchecked_cast_write[$T: type] = 
        alloc_cast_write[]
        - alloc_check_cast_write[]
        - alloc_cast_check_write[]
        - alloc_cast_check_as_write[]
        - alloc_check_as_cast_write[]

    alloc_misaligned_cast[
        $T: type where is_all_safe_trait(self),
        $alignment: const(usize),
    ] =
        fn _(..) -> _ {
            let $layout_result: core::result::Result<core::alloc::Layout, _> = alloc::alloc::Layout::from_size_align(
                _,
                const $alignment
            );
            let $layout: core::alloc::Layout = core::result::Result::unwrap(move $layout_result);
            'alloc:
            let $ptr_1: *mut u8 = alloc::alloc::alloc(copy $layout);
            'cast:
            let $ptr_2: *mut $T = move $ptr_1 as *mut $T (PtrToPtr);
        } where {
            maybe_misaligned($T, $alignment)
        }

    #[diag = "use_after_realloc"]
    use_after_realloc_deref_const[
        $T: type,
    ] =
        unsafe? fn _(..) -> _ {
            let $old_ptr: *const $T = _;
            let $old_ptr_u8: *mut u8 = copy $old_ptr as *mut u8 (PtrToPtr);
            'realloc:
            let $new_ptr_u8: *mut u8 = alloc::alloc::realloc(move $old_ptr_u8, _, _);
            'use:
            let $ref_old: &$T = &*$old_ptr;
        }

    #[diag = "use_after_realloc"]
    use_after_realloc_deref_mut[
        $T: type,
    ] =
        unsafe? fn _(..) -> _ {
            let $old_ptr: *mut $T = _;
            let $old_ptr_u8: *mut u8 = copy $old_ptr as *mut u8 (PtrToPtr);
            'realloc:
            let $new_ptr_u8: *mut u8 = alloc::alloc::realloc(move $old_ptr_u8, _, _);
            'use:
            let $ref_old: &mut $T = &mut *$old_ptr;
        }

    #[diag = "use_after_realloc"]
    use_after_realloc_read_const[
        $T: type,
    ] =
        unsafe? fn _(..) -> _ {
            let $old_ptr: *const $T = _;
            let $old_ptr_u8: *mut u8 = copy $old_ptr as *mut u8 (PtrToPtr);
            'realloc:
            let $new_ptr_u8: *mut u8 = alloc::alloc::realloc(move $old_ptr_u8, _, _);
            'use:
            let $ref_old: $T = copy *$old_ptr;
        }

    #[diag = "use_after_realloc"]
    use_after_realloc_read_mut[
        $T: type,
    ] =
        unsafe? fn _(..) -> _ {
            let $old_ptr: *mut $T = _;
            let $old_ptr_u8: *mut u8 = copy $old_ptr as *mut u8 (PtrToPtr);
            'realloc:
            let $new_ptr_u8: *mut u8 = alloc::alloc::realloc(move $old_ptr_u8, _, _);
            'use:
            let $ref_old: $T = copy *$old_ptr;
        }

    #[diag = "use_after_realloc"]
    use_after_realloc_write_const[
        $T: type,
    ] =
        unsafe? fn _(..) -> _ {
            let $old_ptr: *const $T = _;
            let $old_ptr_u8: *mut u8 = copy $old_ptr as *mut u8 (PtrToPtr);
            'realloc:
            let $new_ptr_u8: *mut u8 = alloc::alloc::realloc(move $old_ptr_u8, _, _);
            'use:
            *$old_ptr = _;
        }

    #[diag = "use_after_realloc"]
    use_after_realloc_write_mut[
        $T: type,
    ] =
        unsafe? fn _(..) -> _ {
            let $old_ptr: *mut $T = _;
            let $old_ptr_u8: *mut u8 = copy $old_ptr as *mut u8 (PtrToPtr);
            'realloc:
            let $new_ptr_u8: *mut u8 = alloc::alloc::realloc(move $old_ptr_u8, _, _);
            'use:
            *$old_ptr = _;
        }

    #[diag = "alloc_maybe_zero_mul"]
    #[const(alloc = "alloc_zeroed")]
    alloc_zeroed_maybe_zero_mul =
        fn $fn(..) -> _ {
            'size:
            let $count: usize;
            let $size: usize = Mul(copy $count, _);
            let $result: core::result::Result<alloc::alloc::Layout, alloc::alloc::LayoutError> =
                alloc::alloc::Layout::from_size_align(
                    copy $size,
                    _
                );
            let $layout : alloc::alloc::Layout =
                core::result::Result<alloc::alloc::Layout, alloc::alloc::LayoutError>::unwrap(
                    move $result
                );
            'alloc:
            _ = alloc::alloc::alloc_zeroed(copy $layout);
        }

    #[const(alloc = "alloc")]
    alloc_maybe_zero_mul =
        fn $fn(..) -> _ {
            'size:
            let $count: usize;
            let $size: usize = Mul(copy $count, _);
            let $result: core::result::Result<alloc::alloc::Layout, alloc::alloc::LayoutError> =
                alloc::alloc::Layout::from_size_align(
                    copy $size,
                    _
                );
            let $layout : alloc::alloc::Layout =
                core::result::Result<alloc::alloc::Layout, alloc::alloc::LayoutError>::unwrap(
                    move $result
                );
            'alloc:
            _ = alloc::alloc::alloc(copy $layout);
        }
}

util {
    alloc_cast_write[$T: type] =
        unsafe? fn _(..) -> _ {
            'alloc:
            let $ptr_1: *mut u8 = alloc::alloc::__rust_alloc(_, _); // _3
            let $ptr_2: *mut $T = move $ptr_1 as *mut $T (PtrToPtr); // _2
            'write:
            (*$ptr_2) = _;
        }
    alloc_check_cast_write[$T: type] =
        unsafe? fn _(..) -> _ {
            'alloc:
            let $ptr_1: *mut u8 = alloc::alloc::__rust_alloc(_, _); // _2
            let $const_ptr_1: *const u8 = copy $ptr_1 as *const u8 (PtrToPtr); // _19
            let $addr_1: usize = copy $const_ptr_1 as usize (Transmute); // _20
            // It's weird that `$ptr_2` can only be declared before `switchInt`
            // switchInt(move $addr_1) {
            //     0_usize => {}
            //     _ => {}
            // }
            let $ptr_2: *mut $T = copy $ptr_1 as *mut $T (PtrToPtr); // _4
            'write:
            (*$ptr_2) = _;
        }
    alloc_cast_check_write[$T: type] =
        unsafe? fn _(..) -> _ {
            'alloc:
            let $ptr_1: *mut u8 = alloc::alloc::__rust_alloc(_, _); // _3
            let $ptr_2: *mut $T = move $ptr_1 as *mut $T (PtrToPtr); // _2
            let $const_ptr_1: *const u8 = copy $ptr_2 as *const u8 (PtrToPtr); // _19
            let $addr_1: usize = copy $const_ptr_1 as usize (Transmute); // _20
            // switchInt(move $addr_1) {
            //     0_usize => {}
            //     _ => {}
            // }
            'write:
            (*$ptr_2) = _;
        }
    alloc_cast_check_as_write[$T: type] =
        unsafe? fn _(..) -> _ {
            'alloc:
            let $ptr_1: *mut u8 = alloc::alloc::__rust_alloc(_, _); // _3
            let $ptr_2: *mut $T = move $ptr_1 as *mut $T (PtrToPtr); // _2
            let $addr_1: usize = copy $ptr_2 as usize (PointerExposeProvenance); // _6
            // switchInt(move $addr_1) {
            //     0_usize => {}
            //     _ => {}
            // }
            'write:
            (*$ptr_2) = _;
        }
    alloc_check_as_cast_write[$T: type] =
        unsafe? fn _(..) -> _ {
            'alloc:
            let $ptr_1: *mut u8 = alloc::alloc::__rust_alloc(_, _);
            let $addr_1: usize = copy $ptr_1 as usize (PointerExposeProvenance);
            let $ptr_2: *mut $T = copy $ptr_1 as *mut $T (PtrToPtr);
            // switchInt(move $addr_1) {
            //     0_usize => {}
            //     _ => {}
            // }
            'write:
            (*$ptr_2) = _;
        }
}

diag {
    unchecked_cast_write = {
        primary(write) = "it is an undefined behavior to dereference a null pointer, and `std::alloc::alloc` may return a null pointer",
        label(alloc)   = "pointer created here",
        label(write)   = "pointer used here",
        note           = "See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.alloc",
        // help           = "check whether it's null before dereferencing",
        name           = "unchecked_allocated_pointer",
        level          = "warn",
    }

    alloc_misaligned_cast = {
        // FIXME: simplify the diagnostic message
        primary(cast) = "resulting pointer `*mut {$T}` has a different alignment than the original alignment that the pointer was created with",
        label(alloc)  = "pointer created here",
        label(cast)  = "pointer casted here",
        note          = "See https://doc.rust-lang.org/std/alloc/fn.alloc.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#tymethod.alloc",
        // help          = "consider using `core::alloc::Layout::new::<T>()` or `core::alloc::Layout::array::<T>(n)` to create a layout for the pointer",
        name          = "misaligned_pointer",
        level         = "warn",
    }

    use_after_realloc = {
        primary(use)   = "use a pointer from `{$T}` after it's reallocated",
        label(realloc) = "`realloc` called here",
        label(use)     = "used here",
        note           = "the `{$T}` buffer may be reallocated here",
        name           = "use_after_realloc",
    }

    alloc_maybe_zero_mul = {
        primary(alloc) = "public function `{$fn}` allocates a pointer that may be zero-sized, which is an undefined behavior",
        label(alloc)   = "pointer created here",
        label(size)    = "size passed in here",
        note           = "See https://doc.rust-lang.org/std/alloc/fn.{$alloc}.html and https://doc.rust-lang.org/std/alloc/trait.GlobalAlloc.html#method.{$alloc}",
        // help           = "check whether the size is zero before allocating",
        name           = "alloc_maybe_zero",
    }
}
