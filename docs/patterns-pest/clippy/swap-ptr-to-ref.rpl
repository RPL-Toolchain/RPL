pattern swap-ptr-to-ref

patt {
    #[diag = "swap_ptr_to_ref"]
    #[deduplicate]
    swap_ptr_to_ref_inline[$T: type] = left_inline[$T = $T] + right_inline[$T = $T]
    #[deduplicate]
    swap_ptr_to_ref[$T: type] = left[$T = $T] + right[$T = $T]
}

util {
    use core::mem::swap;
    use core::intrinsics::typed_swap_nonoverlapping;

    left_inline[$T: type, $ptr: place(*mut $T)] = fn _(..) {
        let $ref_1: &mut $T = &mut *$ptr;
        let $ref_2: &mut $T = _;
        let $ptr_1: *mut $T = &raw mut *$ref_1;
        let $ptr_2: *mut $T = &raw mut *$ref_2;
        'swap:
        _ = typed_swap_nonoverlapping::<$T>(move $ptr_1, move $ptr_2);
    }
    right_inline[$T: type, $ptr: place(*mut $T)] = fn _(..) {
        let $ref_1: &mut $T = _;
        let $ref_2: &mut $T = &mut *$ptr;
        let $ptr_1: *mut $T = &raw mut *$ref_1;
        let $ptr_2: *mut $T = &raw mut *$ref_2;
        'swap:
        _ = typed_swap_nonoverlapping::<$T>(move $ptr_1, move $ptr_2);
    }

    left[$T: type, $ptr: place(*mut $T)] = fn _(..) {
        let $ref_1: &mut $T = &mut *$ptr;
        let $ref_2: &mut $T = _;
        'swap:
        _ = swap::<$T>(copy $ref_1, copy $ref_2);
    }
    right[$T: type, $ptr: place(*mut $T)] = fn _(..) {
        let $ref_1: &mut $T = _;
        let $ref_2: &mut $T = &mut *$ptr;
        'swap:
        _ = swap::<$T>(copy $ref_1, copy $ref_2);
    }
}

diag {
    swap_ptr_to_ref = {
        primary(swap) = "call to `core::mem::swap` with a parameter derived from a raw pointer",
        name          = "swap_ptr_to_ref",
        level         = "warn",
    }
}
