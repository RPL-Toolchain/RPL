pattern eager-transmute

patt {
    // Disabled due to inefficiency in the current implementation.
    // #[diag = "eager_transmute"]
    // and_then_inline[$T: type, $U: type, $src: place($T)] = unsafe? fn _(..) {
    //     'dst:
    //     let $dst: $U = move $src as $U (Transmute);
    //     let $cond: bool;
    //     switchInt(copy $cond) {
    //         0_usize => {
    //             _ = #[Ctor] core::option::Option::<$T>::None;
    //         }
    //         _ => {
    //             _ = #[Ctor] core::option::Option::<$T>::Some(move $dst);
    //         }
    //     }
    // } where {
    //     !niche_ordered($T, $U)
    // }
    #[diag = "eager_transmute"]
    and_then[$T: type, $U: type, $src: place($T)] = unsafe? fn _(..) {
        'dst:
        let $dst: $U = move $src as $U (Transmute);
        _ = bool::then_some::<$U>(_, move $dst);
    } where {
        !niche_ordered($T, $U)
    }
}

diag {
    eager_transmute = {
        primary(dst) = "this transmute is always evaluated eagerly, even if the condition is false",
        name         = "eager_transmute",
    }
}
