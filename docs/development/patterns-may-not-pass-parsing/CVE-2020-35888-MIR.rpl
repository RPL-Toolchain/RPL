pattern CVE-2020-35888

patt {
    p_move[
        $T: type,
    ] = #[mir, warning] pub fn _ (..) -> _ {
        let $raw_ptr: *mut $T = _;
        let $value: $T = _;
        drop((*$raw_ptr));
        (*$raw_ptr) = move $value;
    }
}

#include <iostream>
#include <unordered_set>
#include <unordered_map>
#include <utility>
#include <vector>
// using namespace std;
using std::cin;
using std::cout;
using std::endl;
using std::unordered_map;
using std::vector;

int main() {
    int num; // number of elements
    int target; // target
    cin >> num;
    cin >> target;
    vector<int> vec;
    unordered_map<int, vector<int>> map;
    for (int i = 0; i < num; ++i) {
        int cur;
        cin >> cur;
        vec.push_back(cur);
        
        auto pair = map.find(cur);
        if (pair == map.end()) {
            vector<int> indice;
            indice.push_back(i);
            map.insert(std::make_pair(cur,indice));
        } else {
            pair->second.push_back(i);
        }
    }
    
    for (int i = 0; i < num; ++i) {
        auto cur = vec[i];
        auto remain = target - vec[i];
        auto pair = map.find(remain);
        if (pair != map.end()) {
            if (cur == remain) {
                if (pair->second.size() > 1) {
                    cout << pair->second[0] << " " << pair->second[1] << endl;
                    return 0;
                }
            } else {
                cout << i << " " << pair->second[0] << endl;
                return 0;
            }
        }
    }
}