pattern CVE-2020-25016

patt {
    p_unsound_cast_const[
        $T: type
    ] = #[mir] fn _ (..) -> _ {
        let $from_slice: &[$T] = _;
        let $from_raw: *const [$T] = &raw const *$from_slice;
        let $from_len: usize = PtrMetadata(copy $from_slice);
        let $ty_size: usize = SizeOf($T);
        let $to_ptr: *const u8 = copy $from_raw as *const u8 (PtrToPtr);
        let $to_len: usize = Mul(move $from_len, move $ty_size);
        let $to_raw: *const [u8] = *const [u8] from (copy $to_ptr, copy $to_len);
        let $to_slice: &[u8] = &*$to_raw;
    } #~[safety = safe]

    p_unsound_cast_mut[
        $T: type
    ] = #[mir] fn _ (..) -> _ {
        let $from_slice_mut: &mut [$T] = _;
        let $from_raw_mut: *mut [$T] = &raw mut *$from_slice_mut;
        let $from_len_mut: usize = PtrMetadata(copy $from_slice_mut);
        let $ty_size_mut: usize = SizeOf($T);
        let $to_ptr_mut: *mut u8 = copy $from_raw_mut as *mut u8 (PtrToPtr);
        let $to_len_mut: usize = Mul(move $from_len_mut, move $ty_size_mut);
        let $to_raw_mut: *mut [u8] = *mut [u8] from (copy $to_ptr_mut, copy $to_len_mut);
        let $to_slice_mut: &mut [u8] = &mut *$to_raw_mut;
    } #~[safety = safe]
}

// Here, the metavariable $T is placed in square brackets, which is also for later constraints on T. The specific content of the constraint is: the type $T does not have unsafe trait constraints (except Send, Sync)
// (Since the expression of this constraint requires rustc code/encapsulation in the rpl standard library, it is not reflected in this example)