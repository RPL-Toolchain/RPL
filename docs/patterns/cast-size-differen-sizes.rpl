pattern cast-size-different-sizes

patt {
    p_const_const[
        $T: type, // element type before the cast
        $U: type, // element type after the cast
    ] = #[mir] pub fn _ (..) -> _ {
        'src:
        let $p: *const [$T] = _;
        'cast:
        let $q: *const [$U] = move $p as *const [$U] (PtrToPtr);
    // } where {
    //     !same_abi($T, $U) || !same_size($T, $U) || !same_align($T, $U)
    }
}

diag {
    p_const_const = {
        primary(cast) = "casts between raw pointers to slices with different element sizes",
        label(src)    = "casted from this",
        note          = "casting a pointer to a slice of type `{$T}` to a pointer to a slice of another type `{$U}` with different element type ABI, size or alignment can lead to undefined behavior.",
        name          = "cast_size_different_sizes",
    }
}