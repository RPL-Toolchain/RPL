pattern CVE-2018-21000

util {
    use alloc::vec::Vec;
    use core::ptr::non_null::NonNull;
    use core::ptr::unique::Unique;
    use alloc::raw_vec::Cap;
    use alloc::raw_vec::RawVecInner;
    use alloc::raw_vec::RawVec;
    use alloc::alloc::Global;
    use core::marker::PhantomData;

    p_misordered_para[
        $T1: ty,
        $T2: ty,
        $T3: ty,
        $Op: binop
    ] = #[mir] unsafe fn _ (..) -> _ {
        let $from_vec: Vec::<$T1> = _;
        let mut $from_vec_mut_borrow: &mut Vec::<$T1> = &mut $from_vec;
        let mut $from_vec_non_null: NonNull::<u8> = copy (*$from_vec_mut_borrow).buf.inner.ptr.pointer;
        let mut $from_vec_const_ptr: *const u8 = copy ($from_vec_non_null.pointer);
        let mut $from_vec_mut_ptr: *mut u8 =copy $from_vec_const_ptr as *mut u8 (PtrToPtr);
        let mut $from_vec_inmutable_borrow: &Vec::<$T1> = &$from_vec;
        let mut $from_vec_cap: usize = copy (*$from_vec_inmutable_borrow).buf.inner.cap.0;
        let mut $from_vec_len: usize = copy (*$from_vec_inmutable_borrow).len;
        let mut $tsize: usize = SizeOf($T2);
        let mut $to_vec_cap: usize = $Op(move $from_vec_cap, copy $tsize);
        let mut $to_vec_len: usize = $Op(move $from_vec_len, copy $tsize);
        let mut $to_vec_wrong_cap: Cap = #[Ctor] Cap(copy $to_vec_len);
        let mut $to_vec_mut_ptr: *mut $T3 = copy $from_vec_mut_ptr as *mut $T3 (PtrToPtr);
        let mut $to_vec_const_ptr: *const u8 = copy $to_vec_mut_ptr as *const u8 (PtrToPtr);
        let mut $to_vec_non_null: NonNull::<u8> = NonNull::<u8> { 
            pointer: copy $to_vec_const_ptr 
        };
        let mut $to_vec_unique: Unique::<u8> = Unique::<u8> { 
            pointer: move $to_vec_non_null, 
            _marker: const PhantomData::<u8>
        };
        let mut $to_vec_raw_inner: RawVecInner = RawVecInner { 
            ptr: move $to_vec_unique, 
            cap: copy $to_vec_wrong_cap, 
            alloc: const Global
        };
        let mut $to_vec_raw: RawVec::<$T3> = RawVec::<$T3> {
            inner: move $to_vec_raw_inner, 
            _marker: const PhantomData::<$T3> 
        };
        let mut $to_vec: Vec::<$T3> = Vec::<$T3> { 
            buf: move $to_vec_raw, 
            len: copy $to_vec_cap 
        };
    }
}

patt {
    p1[$T: ty] = p_reversed_para[
        $T1 = u8,
        $T2 = $T,
        $T3 = $T,
        $Op = Div
    ]

    p2[$T: ty] = p_reversed_para[
        $T1 = $T,
        $T2 = $T,
        $T3 = u8,
        $Op = Mul
    ]
}