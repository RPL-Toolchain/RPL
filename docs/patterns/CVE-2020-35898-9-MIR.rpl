pattern CVE-2020-35898/9

patt {
    use std::cell::UnsafeCell;
    use std::rc::Rc;
    use std::rc::RcInner;

    p_rc_unsafe_cell[
        $T: ty
    ] = {                       
        pub struct $Cell {
            $inner: Rc<UnsafeCell<$T>>,
        }

        impl $Cell {
            fn $get_mut(..) -> _ {
                let $self: &mut $Cell = _;
                let $inner_ref: &Rc<UnsafeCell<$T>> = &(*$self).$inner;
                let $inner_ptr: RcInner<UnsafeCell<$T>> = copy (*$inner_ref).ptr;
                let $const_ptr: *const RcInner<UnsafeCell<$T>> = copy $inner_ptr.pointer;
                let $unsafe_cell: &UnsafeCell<$T> = &(*$const_ptr).value;
                let $unsafe_cell_ptr: *const UnsafeCell<$T> = &raw const (*$unsafe_cell);
                let $value_ptr: *mut $T = copy $unsafe_cell_ptr as *mut $T (PtrToPtr);
                let $value_mut_ref: &mut $T = &mut (*$value_ptr);
            }
        }
    }
}

// detection after monomorpization?