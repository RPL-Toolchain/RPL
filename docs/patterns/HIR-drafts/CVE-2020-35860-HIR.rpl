pattern CVE-2020-35860

patt {
    use std::ops::Deref;
    use std::ffi::CStr;

    p_deref[
        $T: ty,
    ] = {
        pub struct $CBox {
            pub $ptr: *mut $T,
        }

        impl Deref for $CBox {
            type Target = _;
            fn deref(&self) -> Self::Target {
                @let $ptr = self.$ptr;
                #without!(if $ptr.is_null()) {
                    _ = CStr::from_ptr($ptr);
                })        
            }
        }
    }
}

diag {
    p_deref = {
        $CBox: "$CBox is Defined here",
        $ptr: "$ptr is defined here",
    }
}

diag {
    p_deref = "
        The public struct $CBox contains a raw pointer ($ptr) to a type $T. 
        Its `Deref` implementation dereferences the pointer without null checks.

        Specifically, the `Deref` implementation calls `CStr::from_ptr(self.$ptr)`,
        whose safety requirements include that the pointer must be non-null.
    "
}