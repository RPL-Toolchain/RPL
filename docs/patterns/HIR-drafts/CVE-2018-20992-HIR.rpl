pattern CVE-2018-20992-HIR

patt {
    use std::vec::Vec;

    // The purpose of the middle brackets seems to be
    // declaring metavariables for types that are not `identifiers`.
    p_vec_set_len_to_extend[
        $T: ty
    ] = pub fn _ (..) -> _ {
        @let $vec: Vec<$T> = _;
        @let $new_len: usize = _;
        @let $old_len: usize = $vec.len();
        // #assert!($new_len > $old_len) {
        //     $vec.set_len($new_len);
        // }
        #without!(if $new_len <= $old_len) {
            $vec.set_len($new_len);
        }
    }
}

// if we consider the `#without!` like `#or!` as a String Substitution.
// Then the pattern after substitution, 
// or the simpilest match algorithm will be
// The target code includes B, but does not include A.

// A: 
// pub fn _ (..) -> _ {
//     @let $vec: Vec<$T> = _;
//     @let $new_len: usize = _;
//     @let $old_len: usize = $vec.len();
//     if $new_len <= $old_len {
//         $vec.set_len($new_len);
//     }
// }
// 
// B:
// pub fn _ (..) -> _ {
//     @let $vec: Vec<$T> = _;
//     @let $new_len: usize = _;
//     @let $old_len: usize = $vec.len();
//     $vec.set_len($new_len);
// }